@{
	var inputId = Model.InputId;
	var searchInput = Model.InputId + "Search";
	var searchUrl = Model.SearchUrl;
	var inputLabel = Model.InputId.Replace("Id", "") + "s";
	var searchResultsDivId = "searchResults" + inputLabel;

	// JS Variable names
	var SearchUrl = inputLabel + "SearchUrl";
	var IdInput = inputLabel + "InputId";
	var SearchInput = inputLabel + "SearchInput";
	var InputSearchResults = inputLabel + "SearchResults";
	var ShouldRemoveDiv = inputLabel + "ShouldRemoveDiv";
}

<div class="form-group position-relative">
	<label for="@searchInput" class="control-label">@inputLabel</label>

	@* Si viene con el parametro de selected, es una edicion y le seteamos el value *@
	@if (Model.Selected != null)
	{
	<input type="hidden" id="@inputId" name="@inputId" value="@Model.Selected.Id">
	<input type="text" id='@searchInput' name="@searchInput" placeholder="Buscar..." class="form-control" autocomplete="off" value="@Model.Selected.OutputString">
	}
	else
	{
	<input type="hidden" id="@inputId" name="@inputId">
	<input type="text" id='@searchInput' name="@searchInput" placeholder="Buscar..." class="form-control" autocomplete="off">
	}

	<div id="@searchResultsDivId" class="search-results"></div>
</div>

<script>
	const @SearchUrl = '@searchUrl';
	const @IdInput = document.querySelector('#@inputId');
	const @SearchInput = document.querySelector('#@searchInput');
	const @InputSearchResults = document.querySelector('#@searchResultsDivId');
	var event = new Event('input');

	let @ShouldRemoveDiv = true;

	@(SearchInput).addEventListener('keyup', @(inputLabel + "Search"))

	@(SearchInput).addEventListener('focus', e => {
		if (@(IdInput).value != '') return;
		@(inputLabel + "Search")(e);
	})

	@(SearchInput).addEventListener('blur', e => {
		if (!@(ShouldRemoveDiv)) return;
		if (@(SearchInput).value == '') {
			@(IdInput).value = '';
			@(IdInput).dispatchEvent(event);
		}
		@(InputSearchResults).innerHTML = "";
	});

	function @(inputLabel + "Search") (e) {
		const query = @(SearchInput).value.trim();

		if (query == '') {
			@(InputSearchResults).innerHTML = "";
			return;
		}

		fetch(`${@SearchUrl}?searchTerm=${query}`)
			.then(res => res.json())
			.then(data => {
				@(InputSearchResults).innerHTML = "";

				for (let result of data) {
					let suggestion = document.createElement('div');

					// suggestion.innerText = result.outputString;

					// Get the index of the first character that matches the search query
					const index = result.outputString.toLowerCase().indexOf(query.toLowerCase());

					// Create a new string with the matching characters wrapped in <strong> tags
					const boldString = `${result.outputString.substring(0, index)}<strong>${result.outputString.substring(index, index + query.length)}</strong>${result.outputString.substring(index + query.length)}`;

					// Set the innerHTML property of the suggestion element to the bolded string
					suggestion.innerHTML = boldString;


					suggestion.addEventListener('click', e => {
						e.stopPropagation();
						@(IdInput).value = result.id;
						@(SearchInput).value = result.outputString;
						@(InputSearchResults).innerHTML = "";
						@(IdInput).dispatchEvent(event);
					});

					@(InputSearchResults).appendChild(suggestion);
				}
			})
			.catch(err => console.log(err));
	}

	document.addEventListener('mousedown', e => @(ShouldRemoveDiv) = !@(InputSearchResults).contains(e.target));
</script>